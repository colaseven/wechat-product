<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		                    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">


    <!--配置数据源 druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.driverClassName}"/>
        <!-- 初始化大小5，最小5，最大20-->
        <property name="url" value="${spring.datasource.url}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙-->
        <property name="filters" value="${spring.datasource.filters}"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同-->
        <property name="validationQuery" value="select 1 "/>
        <!--<property name="proxyFilters">-->
        <!--<list>-->
        <!--<ref bean="logFilter"/>-->
        <!--</list>-->
        <!--</property>-->
        <property name="maxActive" value="${spring.datasource.maxActive}"/>
        <property name="initialSize" value="${spring.datasource.initialSize}"/>
        <!-- 配置获取连接等待超时的时间 60000-->
        <property name="maxWait" value="${spring.datasource.maxWait}"/>
        <property name="minIdle" value="${spring.datasource.minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 60000-->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${spring.datasource.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 300000-->
        <property name="minEvictableIdleTimeMillis"
                  value="${spring.datasource.minEvictableIdleTimeMillis}"/>

        <property name="testWhileIdle" value="${spring.datasource.testWhileIdle}"/>
        <property name="testOnBorrow" value="${spring.datasource.testOnBorrow}"/>
        <property name="testOnReturn" value="${spring.datasource.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 true 20-->
        <property name="poolPreparedStatements" value="${spring.datasource.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements"
                  value="${spring.datasource.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>

    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 设置hibernate方言 可以使用java类动态生成 -->
        <property name="persistenceUnitName" value="unitBase"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapterBase"/>
        <property name="packagesToScan" value="com.caad.wechat.entity"/>
        <property name="jpaProperties">
            <props>
                <!-- 命名规则 My_NAME->MyName -->
                <!-- <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop> -->
                <!-- 配置hibernate的属性 如果使用log4jdbc这个就不起作用 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop><!-- 默认为none； update 慎重作临时调整，一定要预先核对jdbc.properties确认无误后再做临时调整。 -->
            </props>
        </property>
    </bean>

    <!-- Jpa持久化实现厂商类-->
    <bean id="hibernateJpaVendorAdapterBase" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform">
            <bean factory-method="getDialect" class="com.caad.wechat.utils.viss.DialectFactory">
                <constructor-arg ref="dataSource"/>
            </bean>
        </property>
    </bean>

    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.caad.wechat.dao" transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <qualifier value="baseEM"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>